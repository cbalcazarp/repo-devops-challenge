node {
  def commit_id
  stage('Preparation') {
    checkout scm
    sh "git rev-parse --short HEAD > .git/commit-id"                        
    commit_id = readFile('.git/commit-id').trim()
  }
  stage('Installation & Test') {
    sh 'npm install --only=dev'
    sh 'npm test'
  }
  stage('Build & Push image') {
    withDockerRegistry([ credentialsId: "dockerhub", url: "" ]) {
      sh "docker build -t cbalcazarp/repo-devops-challenge:${commit_id} ."
      sh "docker push cbalcazarp/repo-devops-challenge:${commit_id}"
    }
    echo "${commit_id}"
  }

  if (env.BRANCH_NAME == 'alpha') {

    stage('Deploy to Server VMAlpha') {
      echo "Removing old containers"
      sh "ssh -o StrictHostKeyChecking=no -i /root/.ssh/id_rsa_alpha jenkins@3.208.20.126 'docker stop $(docker ps -a -q)'"
      sh "ssh -o StrictHostKeyChecking=no -i /root/.ssh/id_rsa_alpha jenkins@3.208.20.126 'docker rm $(docker ps -a -q)'"
      echo "Creating container"
      sh "ssh -o StrictHostKeyChecking=no -i /root/.ssh/id_rsa_alpha jenkins@3.208.20.126 docker run -d --user root -p 3000:3000 cbalcazarp/repo-devops-challenge:${commit_id}"
    }  
  
  }

  else {
    stage('Deploy to Server VMBeta') {
      echo "Removing old containers"
      sh 'ssh -o StrictHostKeyChecking=no -i /root/.ssh/id_rsa_beta jenkins@54.167.95.80 docker stop $(docker ps -a -q)'
      sh 'ssh -o StrictHostKeyChecking=no -i /root/.ssh/id_rsa_beta jenkins@54.167.95.80 docker rm $(docker ps -a -q)'
      echo "Creating container"
      sh "ssh -o StrictHostKeyChecking=no -i /root/.ssh/id_rsa_beta jenkins@54.167.95.80 docker run -d --user root -p 3000:3000 cbalcazarp/repo-devops-challenge:${commit_id}"
    }  
  }
}